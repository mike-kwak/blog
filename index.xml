<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello, Mike!</title><link>https://hellomike.page/</link><description>Recent content on Hello, Mike!</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 28 Oct 2021 21:00:00 +0900</lastBuildDate><atom:link href="https://hellomike.page/index.xml" rel="self" type="application/rss+xml"/><item><title>스프링 RestTemplate HTTP Client 설정 및 RequestEntity에 담아 요청하기, UriComponentsBuilder 사용하기</title><link>https://hellomike.page/posts/2021/spring-rest-template-and-request-entity-and-uri/</link><pubDate>Thu, 28 Oct 2021 21:00:00 +0900</pubDate><guid>https://hellomike.page/posts/2021/spring-rest-template-and-request-entity-and-uri/</guid><description>
&lt;p>스프링 내에선 &lt;code>RestTemplate&lt;/code>란 객체가 존재해 HTTP 요청을 쉽게 할 수 있다. 하지만 &lt;code>RestTemplate&lt;/code>를 요청 시 생성해서 사용하거나 하는 잘못된 방법이 존재한다. &lt;code>RestTemplate&lt;/code> 내 HTTP Client 종류와 설명, Bean 등록 설정까지 해보고, &lt;code>RequestEntity&lt;/code> 객체를 통해 코드 가독성 좋게 요청하는 방법과 번외로 URI를 템플릿화 하여 작성할 수 있는 &lt;code>UriComponentsBuilder&lt;/code> 클래스 사용법까지 작성해 보았다.&lt;/p>
&lt;h2 id="resttemplate-클래스-및-사용용도">
&lt;a href="#resttemplate-%ed%81%b4%eb%9e%98%ec%8a%a4-%eb%b0%8f-%ec%82%ac%ec%9a%a9%ec%9a%a9%eb%8f%84" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
RestTemplate 클래스 및 사용용도
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/RestTemplate.html">Spring RestTemplate JavaDoc (Spring Framework 3.0 이상)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>HTTP 요청 시 사용하는 클래스이다. 객체를 생성하고 메소드를 살펴보면 많은 메소드들이 펼쳐져 있다. 각각의 HTTP Method마다 존재하고 매개변수에 따라 여러 메소드들을 골라 사용할 수 있다. 하지만 HTTP Method와 URL만 해도 간단하지 않다. 따라서 아래의 메소드를 사용하는 것을 권장한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ResponseEntity&amp;lt;T&amp;gt; exchange(RequestEntity&amp;lt;?&amp;gt; entity, Class&amp;lt;T&amp;gt; responseType)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ResponseEntity&amp;lt;T&amp;gt; exchange(RequestEntity&amp;lt;?&amp;gt; entity, ParameterizedTypeReference&amp;lt;T&amp;gt; responseType)&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>이 두개의 메소드의 차이는 뒤의 타입 정보 전달의 차이가 존재한다. 첫번째 Class타입은 평상시에 사용하면 되지만, 만약 제네릭 타입을 받아야 할때는 두번째 메소드를 사용할 수 있다. 자세한 사용 방법은 아래 &lt;a href="#resttemplate-%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">RestTemplate 잘 사용하기&lt;/a>에서 살펴보겠다.&lt;/p>
&lt;p>이 RestTemplate를 그냥 new로 생성 했을 땐 자바에 내장된 &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/HttpURLConnection.html">HttpUrlConnection&lt;/a> 클래스를 사용한다. JDK 1.1부터 사용되었고, 버전업하며 크게 개선된 건 없어 단순히 연결 후 요청하고 응답하는 액션만 처리할 뿐이다. 커넥션 방법인 &lt;a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Connection">Connection: keep-alive&lt;/a>나 &lt;a href="https://ko.wikipedia.org/wiki/HTTP/2">HTTP/2&lt;/a>와 같은 프로토콜에서의 속도 개선사항을 적용받을 수 없다.&lt;/p>
&lt;h2 id="http-client-라이브러리를-resttemplate에-등록-및-bean-설정">
&lt;a href="#http-client-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac%eb%a5%bc-resttemplate%ec%97%90-%eb%93%b1%eb%a1%9d-%eb%b0%8f-bean-%ec%84%a4%ec%a0%95" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
HTTP Client 라이브러리를 RestTemplate에 등록 및 Bean 설정
&lt;/h2>
&lt;p>우리는 두가지 라이브러리 중 하나를 선택해 도움을 받을 수 있다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://square.github.io/okhttp/">OkHttp&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>HTTP/2 지원.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Android에서 HTTP 요청 시 사용하는 라이브러리인 Retrofit이 사용하는 라이브러리.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>코틀린 코드로 작성되어 코틀린 라이브러리가 의존성에 포함.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hc.apache.org/">Apache HttpComponents&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>자바로 작성됨.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>오랫동안 검증된 Apache Commons에서 분리한 프로젝트.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>버전 4는 HTTP/1.1까지 지원.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>라이브러리를 선택했다면 Spring Boot 2.x 기준으로 설정 방법을 설명하겠다.&lt;/p>
&lt;h3 id="okhttp-라이브러리-설정-방법">
&lt;a href="#okhttp-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac-%ec%84%a4%ec%a0%95-%eb%b0%a9%eb%b2%95" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
OkHttp 라이브러리 설정 방법
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://search.maven.org/artifact/com.squareup.okhttp3/okhttp">Maven Central 검색 사이트&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>아래 코드를 바로 입력하기 보다, Maven 검색 사이트에서 최신 버전을 살펴보고 제공하는 코드를 입력하는 것을 권장한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>현재 OkHttp 5 alpha 버전이 등록되고 있지만 호환성을 담보하지 않으므로 최신의 4.x.x 버전을 사용 권장한다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Maven&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.squareup.okhttp3&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>okhttp&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>4.9.2&lt;span class="c">&amp;lt;!-- 2021/10 기준 최신버전 --&amp;gt;&lt;/span>&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Gradle&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;com.squareup.okhttp3:okhttp:4.9.2&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="apache-httpcomponents-라이브러리-설정-방법">
&lt;a href="#apache-httpcomponents-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac-%ec%84%a4%ec%a0%95-%eb%b0%a9%eb%b2%95" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Apache HttpComponents 라이브러리 설정 방법
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>주의! HttpComponents 5 이상 버전은 Spring Framework 5.3 에서 사전 설정이 존재하지 않음!&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>만약 직접 사용 시엔 &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/http/client/ClientHttpRequestFactory.html">ClientHttpRequestFactory&lt;/a> 인터페이스를 이용해 클래스 구현.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://search.maven.org/artifact/org.apache.httpcomponents/httpclient">Maven Central 검색 사이트&lt;/a>&lt;/p>
&lt;ul>
&lt;li>아래 코드를 바로 입력하기 보다, Maven 검색 사이트에서 최신 버전을 살펴보고 제공하는 코드를 입력하는 것을 권장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Maven&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.httpcomponents&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>httpclient&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>4.5.13&lt;span class="c">&amp;lt;!-- 2021/10 기준 최신버전 --&amp;gt;&lt;/span>&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Gradle&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.apache.httpcomponents:httpclient:4.5.13&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="httpclientconfiguration-설정-코드">
&lt;a href="#httpclientconfiguration-%ec%84%a4%ec%a0%95-%ec%bd%94%eb%93%9c" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
HttpClientConfiguration 설정 코드
&lt;/h3>
&lt;p>위 OkHttp와 HttpComponents 라이브러리 설정 시에 Spring Boot에서 제공하는 클래스가 있다. &lt;code>RestTemplateBuilder&lt;/code> 클래스이다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-boot/docs/2.5.x/api/org/springframework/boot/web/client/RestTemplateBuilder.html">Spring Boot RestTemplateBuilder JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>이 클래스는 이미 Spring Boot를 사용 하고 있다면, &lt;a href="https://docs.spring.io/spring-boot/docs/2.5.x/api/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration.html">RestTemplateAutoConfiguration&lt;/a>에 의해 Bean으로 설정되어있다. 이미 설정된 MessageConverter가 포함된 상태이므로 &lt;code>RestTemplateBuilder&lt;/code> Bean을 받아 &lt;code>build()&lt;/code> 메소드로 &lt;code>RestTemplate&lt;/code> 클래스를 생성하여 Bean으로 등록하면 된다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>OkHttp 사용 시&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">okhttp3.OkHttpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.web.client.RestTemplateBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.client.RestTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HttpClientConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RestTemplateBuilder&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">requestFactory&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttpClient&lt;/span>&lt;span class="o">()))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Apache HttpComponents 4 사용 시&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.http.client.HttpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.http.impl.client.HttpClients&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.web.client.RestTemplateBuilder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.HttpComponentsClientHttpRequestFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.client.RestTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">HttpClientConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RestTemplateBuilder&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">requestFactory&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HttpComponentsClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpClients&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDefault&lt;/span>&lt;span class="o">()))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>만약, Spring Boot 기반이 아닌 구 버전 사용자는 &lt;code>RestTemplate&lt;/code>를 &lt;code>new&lt;/code>로 생성 후 등록할 수도 있다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>OkHttp 사용 시 (Spring Framework 4.3 이상)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">okhttp3.OkHttpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.client.RestTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RestTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttpClient&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Apache HttpComponents 4 사용 시 (Spring Framework 4.0 이상 권장)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.http.client.HttpClient&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.http.impl.client.HttpClients&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.annotation.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.HttpComponentsClientHttpRequestFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.client.RestTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RestTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HttpComponentsClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpClients&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDefault&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="clienthttprequestinterceptor-구현-및-등록">
&lt;a href="#clienthttprequestinterceptor-%ea%b5%ac%ed%98%84-%eb%b0%8f-%eb%93%b1%eb%a1%9d" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
ClientHttpRequestInterceptor 구현 및 등록
&lt;/h3>
&lt;p>&lt;code>RestTemplate&lt;/code>을 통해 요청 전, 후로 어떠한 작업을 하고 싶다면, &lt;code>ClientHttpRequestInterceptor&lt;/code> 인터페이스를 구현해 붙이면 된다. 특히 반복적으로 인증 헤더를 붙인다던지, 요청 로그를 찍을 때 유용하다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/http/client/ClientHttpRequestInterceptor.html">ClientHttpRequestInterceptor JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">...&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.slf4j.Logger&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.slf4j.LoggerFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.ClientHttpRequestInterceptor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.ClientHttpResponse&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.util.StreamUtils&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.nio.charset.StandardCharsets&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpClientConfiguration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RestTemplateBuilder&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">requestFactory&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttpClient&lt;/span>&lt;span class="o">()))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">interceptors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loggingInterceptor&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ClientHttpRequestInterceptor&lt;/span> &lt;span class="nf">loggingInterceptor&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">reqBody&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// HTTP Request 로그
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;req {} {}, body: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMethodValue&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getURI&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">reqBody&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// HTTP 요청 실행
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ClientHttpResponse&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">execution&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">reqBody&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// HTTP Response 로그
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isDebugEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;res {}, body: {}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRawStatusCode&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">StreamUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 코드로 인터페이스 내에 메소드는 하나이기 때문에, 람다로 구현할 수 있다. 그리고 &lt;code>RestTemplate&lt;/code> Bean 생성 시에 인터셉터를 삽입해줄 수 있다.&lt;/p>
&lt;p>문제는 &lt;code>ClientHttpRequestInterceptor&lt;/code> 내 응답 &lt;code>InputStream&lt;/code>을 현재 상태에서 구현 후 사용 시 인터셉터 내에서는 데이터가 존재하지만, 실제로 &lt;code>RestTemplate&lt;/code> 객체를 사용한 곳에 리턴 값이 존재하지 않아 예외가 던저지거나 객체 내 값들이 null일 수 있다. 그 이유는 인터셉터 내의 &lt;code>InputStream&lt;/code>이 한번 사용하면 스트림이 소모되어 다시 사용할 수 없게 되기 때문이다.&lt;/p>
&lt;p>그래서 필요한 것이 &lt;code>BufferingClientHttpRequestFactory&lt;/code> 객체이다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/http/client/BufferingClientHttpRequestFactory.html">BufferingClientHttpRequestFactory JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>이 클래스의 생성자는 간단하게 우리가 실제 사용할 &lt;code>ClientHttpRequestFactory&lt;/code> 객체를 한번 감싸주면 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">...&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.client.BufferingClientHttpRequestFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="nf">restTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RestTemplateBuilder&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplateBuilder&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">requestFactory&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BufferingClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttp3ClientHttpRequestFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OkHttpClient&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="resttemplate-잘-사용하기">
&lt;a href="#resttemplate-%ec%9e%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
RestTemplate 잘 사용하기
&lt;/h2>
&lt;p>먼저 &lt;code>RestTemplate&lt;/code> 사용 시엔 &lt;code>new&lt;/code>로 생성하는 것보다, 위에서 &lt;code>Bean&lt;/code> 등록한 객체를 &lt;code>Autowired&lt;/code> 또는 생성자로 필드 선언하여 Bean 객체를 의존 주입으로 받아 사용하는 것이 좋다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RestTemplate&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위에서 두 &lt;code>exchange&lt;/code> 메소드를 언급했었다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ResponseEntity&amp;lt;T&amp;gt; exchange(RequestEntity&amp;lt;?&amp;gt; entity, Class&amp;lt;T&amp;gt; responseType)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ResponseEntity&amp;lt;T&amp;gt; exchange(RequestEntity&amp;lt;?&amp;gt; entity, ParameterizedTypeReference&amp;lt;T&amp;gt; responseType)&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>이 메소드를 이용해 HTTP 요청을 보내고 받는 코드 예제를 보여줄 것이다. 이 두 메소드의 차이는 리턴 타입을 받는 형태의 차이이다. 위의 클래스 타입을 매개변수로 받는 메소드는 간단한 &lt;code>String.class&lt;/code>, &lt;code>byte[].class&lt;/code>, 제네릭 클래스가 아닌 모든 클래스 타입에 사용할 수 있다.&lt;/p>
&lt;p>만약 Map, List나 기타 컬렉션류, 제네릭 클래스일 경우엔 아래의 &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/core/ParameterizedTypeReference.html">ParameterizedTypeReference&lt;/a> 클래스를 객체로 생성하여 타입을 받을 수 있다. 여기서 &lt;code>ParameterizedTypeReference&amp;lt;T&amp;gt;&lt;/code> 생성자는 &lt;code>protected&lt;/code>이지만 익명 객체로 아무런 구현 없이 &lt;code>new ParameterizedTypeReference&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;() {}&lt;/code>와 같이 생성할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/http/RequestEntity.html">Spring RequestEntity JavaDoc (Spring Framework 4.1 이상)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>메소드에서 매개변수로 받는 &lt;code>RequestEntity&lt;/code>는 &lt;code>HttpEntity&lt;/code>의 자식 클래스로, 다용도로 사용 할 수 있다. 특히 컨트롤러에서 다음과 같이 매개변수로 선언 시 요청 데이터들을 사용할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/post&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">post&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RequestEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>여기서는 RestTemplate의 요청 객체로 선언하여 사용할 수 있다. 아래는 간단한 예제이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.core.ParameterizedTypeReference&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.RequestEntity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.net.URI&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">RequestEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RequestEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">URI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;https://httpbin.org/anything&amp;#34;&lt;/span>&lt;span class="o">)).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">exchange&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ParameterizedTypeReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{}).&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>조금 더 복잡한 예제인 아래와 같은 형태의 JSON 문서를 POST 요청 하는 것을 해보자.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;send_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello, Mike!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;receiver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;mike&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;is_beep&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 JSON 객체를 요청하고 응답하는 메소드는 다음과 같다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.core.ParameterizedTypeReference&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.RequestEntity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.net.URI&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Arrays&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.HashMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">requestBodyMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">requestBodyMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;send_id&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">requestBodyMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Hello, Mike!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">requestBodyMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;receiver&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mike&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="n">requestBodyMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;is_beep&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">RequestEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="n">RequestEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">post&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">URI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;https://httpbin.org/anything&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">requestBodyMap&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">restTemplate&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">exchange&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ParameterizedTypeReference&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;()&lt;/span> &lt;span class="o">{}).&lt;/span>&lt;span class="na">getBody&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>간단한 형태는 &lt;code>Map&amp;lt;String, Object&amp;gt;&lt;/code> 타입으로 주고 받을 수 있고, 복잡한 형태는 Value Object 클래스를 만들어 사용할 수도 있다.&lt;/p>
&lt;h3 id="exception">
&lt;a href="#exception" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Exception
&lt;/h3>
&lt;p>&lt;code>RestTemplate&lt;/code> 객체를 사용해서 HTTP 요청 후 응답 상태가 만약 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses">4XX&lt;/a>를 받게 된다면, &lt;code>HttpClientErrorException&lt;/code> 예외를 던진다. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses">5XX&lt;/a>일 경우엔 &lt;code>HttpServerErrorException&lt;/code> 예외를 던진다. 이 두 예외 클래스는 &lt;code>HttpStatusCodeException&lt;/code>의 자식 클래스이다. 사실 이 예외 클래스들은 계층 관계가 복잡한데, 여러가지 예외 형태를 묶다보니 생긴 일인 듯 하다.&lt;/p>
&lt;p>또한 &lt;code>RestTemplate&lt;/code> 사용 중 발생하는 예외는 &lt;code>RestClientException&lt;/code>의 하위 클래스이다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/RestClientException.html">RestClientException (Spring 3.0 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>모든 RestTemplate의 Exception 처리를 담당한다. HTTP 응답 에러 뿐만 아니라 I/O 에러, JSON 이나 XML 포멧 등을 처리 하기 위한 MessageConverter 작동 중 에러 등 모두를 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/RestClientResponseException.html">RestClientResponseException (Spring 4.3 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>HTTP 응답 에러를 위한 예외 클래스이다. 모든 응답 상태를 잡으려면 이 예외 발생 객체를 처리하면 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/UnknownHttpStatusCodeException.html">UnknownHttpStatusCodeException (Spring 4.2 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>HTTP 응답 에러 중 표준이 아닌 알 수 없는 응답 상태에 대한 예외 처리를 위한 클래스이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/HttpStatusCodeException.html">HttpStatusCodeException (Spring 3.0 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>HTTP 응답 에러 중 알려진 응답 상태에 대한 예외 처리를 위한 클래스이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/HttpClientErrorException.html">HttpClientErrorException (Spring 3.0 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>HTTP 4XX Client Error 응답 시에 던져지는 예외 클래스이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/client/HttpServerErrorException.html">HttpServerErrorException (Spring 3.0 이상)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>HTTP 5XX Server Error 응답 시에 던져지는 예외 클래스이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 예외 클래스 계층이 존재하며, 필요한 목적에 따라 사용할 수 있다. 보통은 &lt;code>RestClientResponseException&lt;/code> 타입만 &lt;code>catch&lt;/code>해서 사용하면 응답하는 모든 상태에 대한 처리를 할 수 있다.&lt;/p>
&lt;h2 id="번외-uricomponentbuilder">
&lt;a href="#%eb%b2%88%ec%99%b8-uricomponentbuilder" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
번외, UriComponentBuilder
&lt;/h2>
&lt;p>&lt;code>URI.create(String uri)&lt;/code> 정적 생성 메소드는 문자열로 간단하게 URI 객체를 생성할 수 있지만 매개변수 문자열이 잘못된 형식일 때 &lt;code>URISyntaxException&lt;/code> 예외가 던져지는 위험이 존재하고, URI 형태가 비슷하면서 어떠한 경로나 쿼리 변수만 다르게 템플릿화 시키고 싶다면 문자열로 직접 사용하는 것은 하드코딩이 될 수 있다.&lt;/p>
&lt;p>그래서 안전하고 템플릿 형태로 만들 수 있는 &lt;code>UriComponentsBuilder&lt;/code> 클래스와 &lt;code>UriComponents&lt;/code> 클래스 두개의 사용법을 간단히 소개한다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/util/UriComponentsBuilder.html">Spring UriComponentsBuilder JavaDoc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/util/UriComponents.html">Spring UriComponents JavaDoc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/URI.html">JDK java.net.URI JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>UriComponentsBuilder&lt;/code> 클래스는 new 생성자가 아닌, 정적 생성 메서드가 몇가지 존재한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>UriComponentsBuilder.fromHttpUrl(String httpUrl)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>일반적으로 사용하는 주소창의 URL을 문자열로 받는다.&lt;/li>
&lt;li>&lt;code>https://www.google.com/search?q=resttemplate&lt;/code> 과 같은 형태.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UriComponentsBuilder.fromPath(String path)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>프로토콜이나 도메인이 빠진 경로 형태의 문자열을 받을 수 있다.&lt;/li>
&lt;li>&lt;code>/auth/tokens&lt;/code> 와 같은 형태&lt;/li>
&lt;li>&lt;code>{variable}&lt;/code>과 같이 템플릿을 위한 변수 설정도 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UriComponentsBuilder.fromUri(URI uri)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.net.URI&lt;/code> 객체를 받는 형태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UriComponentsBuilder.fromUriString(String uri)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>URI의 문자열 형태를 받을 수 있다.&lt;/li>
&lt;li>URI는 웹 주소 뿐만 아니라 &lt;code>tel:+82-2-0000-0000&lt;/code>, &lt;code>mailto:someone@example.com?subject=hello&lt;/code> 같은 형태도 가능.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UriComponentsBuilder.newInstance()&lt;/code>&lt;/p>
&lt;ul>
&lt;li>아무런 매개변수 없이 일단 객체를 생성한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기타 다른 메소드는 JavaDoc 참조&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>정적 생성 메서드를 매개로 Builder 패턴으로 필요한 것을 붙여가며 객체 생성이 가능하다. 주요 빌더 메서드들은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>scheme(String scheme)&lt;/code>, &lt;code>host(String host)&lt;/code>, &lt;code>port(int port)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>scheme는 http, https, ftp와 같은 프로토콜이 될 수 있다. 또는 tel, mailto와 같은 정보 단위일 수 있다.&lt;/li>
&lt;li>host는 &lt;code>google.com&lt;/code>, &lt;code>youtube.com&lt;/code>, &lt;code>127.0.0.1&lt;/code>과 같은 ip나 hostname 이다.&lt;/li>
&lt;li>port는 프로토콜 통신 시 HTTP 80, HTTPS 443과 같은 기본 포트가 아닐 시 지정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>path(String path)&lt;/code>, &lt;code>pathSegment(String... pathSegments)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>path는 &lt;code>/&lt;/code>부터 시작하며 &lt;code>/v3/auth/tokens&lt;/code>와 같은 위치를 나타낸다.&lt;/li>
&lt;li>pathSegment는 경로의 조각이며 &lt;code>auth/token&lt;/code>과 같은 조각을 뜻한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>replacePath(String path)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>replacePath는 이미 지정한 경로를 지우고 새로 지정하는 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>queryParam(String name, Object... values)&lt;/code>, &lt;code>queryParam(String name, Collection&amp;lt;?&amp;gt; values)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>queryParam은 &lt;code>?&lt;/code> 뒤의 매개변수를 지정하는 것이며, URI에서 &lt;code>?query=http&amp;amp;page=2&lt;/code>와 같은 형태다.&lt;/li>
&lt;li>values 뒤에 여러 개의 객체 또는 객체 컬렉션을 지정할 수 있으며, &lt;code>?query=first&amp;amp;query=second&lt;/code>와 같이 붙는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>queryParams(MultiValueMap&amp;lt;String, String&amp;gt; params)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/util/MultiValueMap.html">MultiValueMap&lt;/a>으로 위의 파라메터를 한꺼번에 지정할 수 있으며, 사용 시엔 구현체인 &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/util/LinkedMultiValueMap.html">LinkedMultiValueMap&lt;/a> 클래스를 객체로 생성하여 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>uri(URI uri)&lt;/code>, &lt;code>uriComponents(UriComponents uriComponents)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>URI 객체나 UriComponents 객체를 합칠 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>UriComponents build()&lt;/code>, &lt;code>UriComponents buildAndExpand(Object... uriVariableValues)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>모두 다 조합 후 build 메소드를 통해 UriComponents 객체를 생성한다.&lt;/li>
&lt;li>만약 Path 내 &lt;code>{variable}&lt;/code>과 같은 템플릿 변수가 있다면 buildAndExpand를 통해 앞에서부터 순서대로 문자열이나 toString이 가능한 객체를 삽입시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기타 다른 메소드는 JavaDoc 참조&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>만약 &lt;code>UriComponentsBuilder&lt;/code> 객체를 통해 &lt;code>UriComponents&lt;/code> 객체를 생성했다면, &lt;code>toUri()&lt;/code> 메소드를 통해 우리가 사용하기 위한 실제 &lt;code>java.net.URI&lt;/code> 객체를 생성하여 사용할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">UriComponents&lt;/span> &lt;span class="n">hostUriComponents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UriComponentsBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fromHttpUrl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;https://www.example.com&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">URI&lt;/span> &lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UriComponentsBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">fromPath&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/test/{testNumber}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">uriComponents&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hostUriComponents&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">queryParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;query&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">buildAndExpand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">toUri&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>URI 구조가 복잡하거나, 코드 분기에 따라 URI 형태가 바뀌어야 한다면 &lt;code>UriComponentsBuilder&lt;/code> 클래스를 잘 사용하면 쉽게 URI 객체를 생성할 수 있다.&lt;/p>
&lt;h2 id="마치며">
&lt;a href="#%eb%a7%88%ec%b9%98%eb%a9%b0" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
마치며
&lt;/h2>
&lt;p>스프링은 HTTP 요청 시에 &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/web-reactive.html">Spring WebFlux&lt;/a> 내 &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html">WebClient&lt;/a> 클래스를 사용하는 것을 Spring Framework 5 부턴 권장하고 있다. 하지만 서블릿 기반으로 개발한 코드 위에 &lt;code>WebClient&lt;/code> 하나 만을 위해 라이브러리 의존성 추가 하는 것도 이상하다. 또한 &lt;a href="https://projectreactor.io/">Project Reactor&lt;/a> 라이브러리의 비동기 코드를 이해해야 사용하기 수월하다.&lt;/p>
&lt;p>따라서 아직도 서블릿 기반 코드에서는 &lt;code>RestTemplate&lt;/code> 클래스가 자주 사용하게 된다. 하지만 부적절하게 사용되는 케이스를 많이 보았었다. 이 글이 &lt;code>RestTemplate&lt;/code> 클래스를 잘 사용할 수 있게 도와주는 가이드 역할이 되었으면 한다.&lt;/p></description></item><item><title>스프링 프레임워크에서 StreamUtils, Resource를 이용해 파일 읽어오기</title><link>https://hellomike.page/posts/2021/spring-utils-io-resources/</link><pubDate>Sat, 23 Oct 2021 16:07:04 +0900</pubDate><guid>https://hellomike.page/posts/2021/spring-utils-io-resources/</guid><description>
&lt;p>스프링에는 유용한 도구들이 많이 준비되어있다. 하지만 주변에서는 그런 존재를 몰라 라이브러리를 따로 사용하는 경우가 많았다. 이 글에서는 스프링 프레임워크의 StreamUtils, Resource 인터페이스와 그 구현체 클래스를 활용하는 팁들을 작성했다.&lt;/p>
&lt;h2 id="streamutils-유틸-클래스">
&lt;a href="#streamutils-%ec%9c%a0%ed%8b%b8-%ed%81%b4%eb%9e%98%ec%8a%a4" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
StreamUtils 유틸 클래스
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/StreamUtils.html">Spring Framework StreamUtils JavaDoc&lt;/a>&lt;/li>
&lt;li>Spring Framwork 3.2.2 부터 사용 가능&lt;/li>
&lt;/ul>
&lt;p>이 유틸 클래스는 스프링 프레임워크 내에 내장되어 있고, Java Input/Output Stream을 다루기 위한 것이다. 실제로 자바에서 Input/Output Stream 다루기엔 보일러플레이트(사전 준비) 코드들이 많다.&lt;/p>
&lt;p>아래는 InputStream을 String으로 바꾸는 코드이다.&lt;/p>
&lt;ul>
&lt;li>코드 출처 : &lt;a href="https://stackoverflow.com/a/35446009">How do I read / convert an InputStream into a String in Java? - Stack Overflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// 가장 빠르다던 ByteArrayOutputStream 이용: https://stackoverflow.com/a/35446009
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">streamToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">InputStream&lt;/span> &lt;span class="n">inputStream&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ByteArrayOutputStream&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ByteArrayOutputStream&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// JDK 1.7 미만 사용 시 &amp;#34;UTF-8&amp;#34;로 대체
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">streamToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inputStream&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>물론 위 코드를 유틸클래스를 만들어서 구현하는 방법도 괜찮다. Java 내에선 가장 빠른 코드이기 때문이다. 하지만 저 코드가 생각나지 않을 때는 어떻게 할까? 아니면 String이 아니라 다른 형태로 받고 싶다면? &lt;code>commons-io&lt;/code> 라이브러리의 &lt;code>IOUtils&lt;/code> 유틸 클래스와 비슷하게, 스프링 프레임워크는 이미 &lt;code>StreamUtils&lt;/code> 유틸 클래스를 준비해두었다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.util.StreamUtils&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.nio.charset.StandardCharsets&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StreamUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inputStream&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="자주-쓰는-메소드">
&lt;a href="#%ec%9e%90%ec%a3%bc-%ec%93%b0%eb%8a%94-%eb%a9%94%ec%86%8c%eb%93%9c" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
자주 쓰는 메소드
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;code>static byte[] copyToByteArray(InputStream in)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>InputStream을 byte 배열로 반환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>static String copyToString(InputStream in, Charset charset)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>InputStream을 문자열로 반환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>static InputStream emptyInput()&lt;/code>&lt;/p>
&lt;ul>
&lt;li>빈 InputStream을 반환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>1번&lt;/strong>인 InputStream을 Byte 배열로 변환하는 메소드와 &lt;strong>2번&lt;/strong>인 InputStream을 String으로 변환하는 메소드가 가장 많이 쓰일 것이다.&lt;/p>
&lt;p>IO 처리 시에는 특히나 byte 배열을 처리할 일이 많다. Base64 인코딩을 하거나 소켓을 사용할 때에도 byte 배열을 기준으로 사용한다.&lt;/p>
&lt;p>&lt;strong>3번&lt;/strong>인 emptyInput() 메소드는 얼핏 보면 무가치 할 것 같지만 의외의 유용성이 높은데, InputStream을 매개변수로 주거나 반환할 때 null 대신 쓰이기 좋을 것이다.&lt;/p>
&lt;h2 id="표준-문자셋">
&lt;a href="#%ed%91%9c%ec%a4%80-%eb%ac%b8%ec%9e%90%ec%85%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
표준 문자셋
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/charset/StandardCharsets.html">java.nio.charset.StandardCharsets JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>잠깐 짚고 넘어갈 표준 문자셋은 JDK 1.7부터 존재한다. 실제로 1.7 이전에는 문자셋 설정을 스트링으로 받았었다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">byteArray&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">byteArray&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Charset&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이런 식으로 처리 했어야 했는데, 문제는 String 타입의 매개변수의 문자셋 코드가 잘못 입력했을 때이다. 그땐 UnsupportEncodingException으로 인해 프로그램이 중단된다. IOException의 자식 클래스여서 더 심각했다.&lt;/p>
&lt;p>그래서 표준 문자셋 객체 상수를 StandardCharsets 클래스에 정의하였다. 따라서 이제는 다음과 같이 안전하게 처리할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">byteArray&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>만약, EUC-KR을 쓰고 싶다면? Exception을 처리해야 할 위험성이 계속 존재하지만 다음과 같은 방법으로 해야 한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">byteArray&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Charset&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;EUC-KR&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="filecopyutils-유틸-클래스">
&lt;a href="#filecopyutils-%ec%9c%a0%ed%8b%b8-%ed%81%b4%eb%9e%98%ec%8a%a4" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
FileCopyUtils 유틸 클래스
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/FileCopyUtils.html">Spring Framework FileCopyUtils JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>위의 StreamUtils 유틸 클래스는 버전 3.2.2 부터 생긴 반면, FileCopyUtils는 초기 버전에도 존재했다. 유틸 클래스 이름 그대로 파일을 복사하는 정적 메소드가 담겨있다. 자세한 내용은 JavaDoc을 참조 바란다.&lt;/p>
&lt;p>물론 JDK 1.7이상이라면 &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/nio/file/Files.html">java.nio.file.Files&lt;/a> 클래스를 사용하는 것이 더 좋다. 더 편리하고 다양한 유틸리티 정적 메소드들이 존재한다.&lt;/p>
&lt;h2 id="resource-인터페이스와-구현체">
&lt;a href="#resource-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4%ec%99%80-%ea%b5%ac%ed%98%84%ec%b2%b4" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Resource 인터페이스와 구현체
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#resources">Spring Framework Manual&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html">Spring Framework Resource JavaDoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Resource는 인터페이스다. 그냥 사용할 수는 없고 다음과 같은 구현된 클래스가 존재한다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/UrlResource.html">UrlResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/ClassPathResource.html">ClassPathResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/FileSystemResource.html">FileSystemResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/PathResource.html">PathResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/support/ServletContextResource.html">ServletContextResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/InputStreamResource.html">InputStreamResource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/ByteArrayResource.html">ByteArrayResource&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>jar과 같이 묶이는 파일은 &lt;code>ClassPathResource&lt;/code>를 이용하고, 일반적인 파일을 읽어올 땐 &lt;code>FileSystemResource&lt;/code> 를 사용한다. 따라서 리소스에 텍스트 파일을 저장하고 읽어오고 싶을 땐 다음과 같은 방법을 사용할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.core.io.Resource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.core.io.ClassPathResource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.util.StreamUtils&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.nio.charset.StandardCharsets&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">Resource&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassPathResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;load.txt&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">loaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StreamUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputStream&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>간편한 방법이지만 이건 경로를 직접 하드코딩 해야하는 단점도 존재한다. 스프링 프레임워크를 쓰는 이유가 강력한 Dependency Injection(의존 주입)에 의한 IoC 컨테이너를 사용 하기 위함도 있을 것이다.&lt;/p>
&lt;p>특히 스프링 부트를 사용한다면 application.properties (또는 yaml)의 존재를 알 것이다. properties와 &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html">@Value&lt;/a> 애노테이션의 조합으로 DI를 이용해 불러 올 수도 있다.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">load.resource=classpath:load.txt
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LoadResource&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">loaded&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">LoadResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${load.resource}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Resource&lt;/span> &lt;span class="n">loaded&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loaded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StreamUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">copyToStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">loaded&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputStream&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getLoaded&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">loaded&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>또는 이와 같이 Value 애노테이션에 하드코딩하여 넣을 수도 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:load.txt&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="마치며">
&lt;a href="#%eb%a7%88%ec%b9%98%eb%a9%b0" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
마치며
&lt;/h2>
&lt;p>물론 스프링 프레임워크를 사용하지 않아도, Java를 사용한다면 아래와 같은 친숙한 라이브러리들이 있다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://commons.apache.org/proper/commons-io/">commons-io&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">IOUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inputStream&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://guava.dev/">Guava&lt;/a>&lt;/p>
&lt;ul>
&lt;li>InputStream을 String으로 변환.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">ByteSource&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ByteSource&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">InputStream&lt;/span> &lt;span class="nf">openStream&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">inputStream&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">};&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asCharSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>classpath 내 파일을 읽어 String으로 가져오기.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Resources&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getResource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;load.txt&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>JDK 9 이상&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">inputStream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readAllBytes&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">StandardCharsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UTF_8&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>Apache Commons와 Google Guava는 둘 다 많이 찾고 쓰는 자바 라이브러리 묶음들이다. IO부분은 commons-io 라이브러리가 간편하고 강력한 편이지만 개인적으론 Guava가 라이브러리 구성이 좋아 선호한다.&lt;/p>
&lt;p>최근 JDK 버전들은 유틸 클래스 등도 강화가 많이 되어, 특정 라이브러리가 없어도 개발이 많이 편해졌다. 그래도 스프링 프레임워크의 강력한 기능과 엮어 사용하면 더욱 더 강력하고 객체지향적이게 사용할 수 있다.&lt;/p></description></item></channel></rss>